{"version":3,"sources":["Algorithms/MergeSort/MergeSort.js","Algorithms/MergeSort/mergeAnimation.jsx","Algorithms/BubbleSort.js","Algorithms/QuickSort/QuickSort.js","Algorithms/QuickSort/QuickSortAnimation.js","Algorithms/InsertionSort/InsertionSort.js","Algorithms/InsertionSort/InsertionSortAnimation.js","Visualizer/SortVisualizer.jsx","App.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","mergeSortAnimated","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","setTimeout","backgroundColor","newHeight","height","getBubbleSortAnimations","temp","tempStyle","console","log","swap","firstValue","secondValue","quickSort","leftIndex","rightIndex","pivot","partition","quickSortAnimated","barOneIndex","barTwoIndex","insertionSort","current","insertionSortAnimated","SortVisualizer","state","randomArray","this","resetArray","size","randomInteger","setState","min","max","random","className","position","map","arrayUnit","index","key","onClick","ref","Component","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.2e310b87.chunk.js","sourcesContent":["const getMergeSortAnimations = (array) => {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n  }\r\n  \r\n  function mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n  }\r\n  \r\n  function doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, j]);\r\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index i in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n      } else {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index j in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n      }\r\n    }\r\n    while (i <= middleIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, i]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, i]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([j, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([j, j]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n\r\n  export default getMergeSortAnimations;","import getMergeSortAnimations from './MergeSort'\r\n\r\n// Change this value for the speed of the animations.\r\nconst ANIMATION_SPEED_MS = 5;\r\n\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = 'teal';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'pink';\r\n\r\nconst mergeSortAnimated = (array) => {\r\n        const animations = getMergeSortAnimations(array);\r\n        const arrayBars = document.getElementsByClassName('bar');\r\n        for (let i = 0; i < animations.length; i++) {\r\n          \r\n          const isColorChange = i % 3 !== 2;\r\n          if (isColorChange) {\r\n            const [barOneIdx, barTwoIdx] = animations[i];\r\n            const barOneStyle = arrayBars[barOneIdx].style;\r\n            const barTwoStyle = arrayBars[barTwoIdx].style;\r\n            //const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n            if(i % 3 ===0) {\r\n              setTimeout(() => {\r\n                barOneStyle.backgroundColor = SECONDARY_COLOR;\r\n                barTwoStyle.backgroundColor = SECONDARY_COLOR;\r\n              }, i * ANIMATION_SPEED_MS);\r\n            } else {\r\n              setTimeout(() => {\r\n                barOneStyle.backgroundColor = PRIMARY_COLOR;\r\n                barTwoStyle.backgroundColor = PRIMARY_COLOR;\r\n              }, i * ANIMATION_SPEED_MS);\r\n            }\r\n            // setTimeout(() => {\r\n            //   barOneStyle.backgroundColor = color;\r\n            //   barTwoStyle.backgroundColor = color;\r\n            // }, i * ANIMATION_SPEED_MS);\r\n          } else {\r\n            setTimeout(() => {\r\n              const [barOneIdx, newHeight] = animations[i];\r\n              const barOneStyle = arrayBars[barOneIdx].style;\r\n              barOneStyle.height = `${newHeight}px`;\r\n            }, i * ANIMATION_SPEED_MS);\r\n          }\r\n       }     \r\n}\r\n\r\nexport default mergeSortAnimated;","\r\n// Change this value for the speed of the animations.\r\nconst ANIMATION_SPEED_MS = 100;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = 'teal';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'pink';\r\n\r\nconst getBubbleSortAnimations = (array) => {\r\n  \r\n  const arrayBars = document.getElementsByClassName('bar');\r\n\r\n  //arrayBars[0].style.backgroundColor = SECONDARY_COLOR ;\r\n    \r\n    for (let i = 0; i < array.length ; i++) {\r\n      \r\n      for(let j = 0 ; j < array.length - i ; j++){\r\n        //setTimeout(() => {\r\n        //   arrayBars[j].style.backgroundColor = SECONDARY_COLOR\r\n        //   arrayBars[j+1].style.backgroundColor = SECONDARY_COLOR\r\n        // }, i * ANIMATION_SPEED_MS)\r\n        setTimeout(() => {       \r\n        if (array[j] < array[j + 1]) {\r\n          \r\n           arrayBars[j].style.backgroundColor = SECONDARY_COLOR;\r\n           arrayBars[j+1].style.backgroundColor = SECONDARY_COLOR;\r\n          // swap values\r\n        let temp = array[j];\r\n        array[j] = array[j+1];\r\n        array[j + 1] = temp;\r\n\r\n        const barOneStyle = arrayBars[j].style;\r\n        const barTwoStyle = arrayBars[j+1].style;\r\n\r\n        //swap bar sizes\r\n        let tempStyle = barOneStyle.height;\r\n        barOneStyle.height = barTwoStyle.height\r\n        barTwoStyle.height = tempStyle;\r\n          } else {\r\n            \r\n               arrayBars[j].style.backgroundColor = PRIMARY_COLOR;\r\n               //arrayBars[j+1].style.backgroundColor = SECONDARY_COLOR;\r\n           }\r\n          }, i * ANIMATION_SPEED_MS)        \r\n     }\r\n    \r\n     \r\n    }\r\n\r\n    //arrayBars.style.backgroundColor = PRIMARY_COLOR;\r\n    console.log(array);\r\n    \r\n      // for (let i = 0; i < array.length; i++) {\r\n        \r\n      //   setTimeout(() => {\r\n      //     arrayBars[i].style.backgroundColor = PRIMARY_COLOR\r\n      //   }, 1000); \r\n      // }\r\n    return array;   \r\n\r\n    function sleep(ms) {\r\n      return new Promise(resolve => setTimeout(resolve, ms));\r\n    }\r\n}\r\n\r\nexport default getBubbleSortAnimations;\r\n\r\n\r\n\r\n","// // Change this value for the speed of the animations.\r\n const ANIMATION_SPEED_MS = 100;\r\n\r\n// // This is the main color of the array bars.\r\n// const PRIMARY_COLOR = 'teal';\r\n\r\n// // This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'pink';\r\n\r\nconst animations = [];\r\n\r\nconst quickSort = (array, leftIndex, rightIndex)=> {\r\n    \r\n    \r\n\r\n    leftIndex = leftIndex || 0;\r\n    rightIndex = rightIndex || array.length - 1;\r\n\r\n    let pivot = partition(array, leftIndex, rightIndex, animations)\r\n\r\n    if (leftIndex < pivot - 1) {\r\n        quickSort(array, leftIndex, pivot - 1)\r\n    }\r\n\r\n    if(rightIndex > pivot) {\r\n        quickSort(array, pivot, rightIndex)\r\n    } \r\n\r\n    return animations;\r\n}\r\n\r\nfunction swap (array, firstValue, secondValue) {    \r\n    let temp = array[firstValue];\r\n    array[firstValue] = array [secondValue];\r\n    array[secondValue] = temp;\r\n}\r\n\r\nfunction partition (array, leftIndex, rightIndex, animations) {\r\n\r\n    let pivot = rightIndex;\r\n    let i = leftIndex;\r\n\r\n    /*The logic under Lomuto is, we start from the leftmost element and \r\n    keep track of index of smaller (or equal to) elements as j. While \r\n    traversing, if we find a smaller element, we swap current element \r\n    with arr[j]. Otherwise we ignore current element.*/\r\n    for (let j = leftIndex; j < rightIndex; j++) {\r\n        if (array[j] <= array[pivot]) {\r\n            swap(array, i, j);\r\n            animations.push([i, j])\r\n            i++;\r\n        }\r\n    }\r\n    swap(array, i, rightIndex);\r\n    animations.push([i, rightIndex]);\r\n    \r\n    return i;\r\n\r\n\r\n}\r\n\r\n\r\n\r\nexport default quickSort;","import quickSort from \"./QuickSort\";\r\n// Change this value for the speed of the animations.\r\nconst ANIMATION_SPEED_MS = 5;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = 'teal';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'pink';\r\n\r\nconst quickSortAnimated = (array) => {\r\n    const animations = quickSort(array);\r\n    console.log(animations)\r\n\r\n    const arrayBars = document.getElementsByClassName(\"bar\");\r\n\r\n    for (let i = 0; i < animations.length; i++) {\r\n        const [barOneIndex, barTwoIndex] = animations[i]\r\n\r\n        const barOneStyle = arrayBars[barOneIndex].style;\r\n        const barTwoStyle = arrayBars[barTwoIndex].style;\r\n\r\n        setTimeout(() => {            \r\n        //swap bar sizes\r\n        let tempStyle = barOneStyle.height;\r\n        barOneStyle.height = barTwoStyle.height\r\n        barTwoStyle.height = tempStyle;\r\n        },i * ANIMATION_SPEED_MS)       \r\n    }\r\n\r\n}\r\n\r\nexport default quickSortAnimated;","const insertionSort = (array) => {\r\n    const animations = [];\r\n\r\n    for (let i = 1; i < array.length; i++) {\r\n        // Choosing the first element in our unsorted subarray\r\n        let current = array[i];\r\n        // The last element of our sorted subarray\r\n        let j = i-1; \r\n        while ((j >= 0) && (current < array[j])) {\r\n            array[j+1] = array[j];\r\n            animations.push([(j+1), j]);\r\n            console.log(\"Values1: \" + (j+1) + \", \" + i);\r\n            j--;\r\n        }\r\n        array[j+1] = current;\r\n        console.log(\"Values2: \" + (j+1) + \", \" + i);\r\n        //animations.push([(j+1), i])\r\n        }\r\n    return animations;\r\n}\r\n\r\nexport default insertionSort;","import insertionSort from \"./InsertionSort\";\r\n\r\n\r\n// Change this value for the speed of the animations.\r\nconst ANIMATION_SPEED_MS = 2;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = 'teal';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'pink';\r\n\r\nconst insertionSortAnimated = (array) => {\r\n    const animations = insertionSort(array);\r\n\r\n    const arrayBars = document.getElementsByClassName(\"bar\");\r\n\r\n    for (let i = 0; i < animations.length; i++) {\r\n        const [barOneIndex, barTwoIndex] = animations[i];   \r\n        \r\n        const barOneStyle = arrayBars[barOneIndex].style;\r\n        const barTwoStyle = arrayBars[barTwoIndex].style;\r\n\r\n        setTimeout(() => {\r\n        //arrayBars[barOneIndex] = arrayBars[barTwoIndex]\r\n        let tempStyle = barOneStyle.height;\r\n        barOneStyle.height = barTwoStyle.height\r\n        barTwoStyle.height = tempStyle;\r\n\r\n        \r\n\r\n        }, i* ANIMATION_SPEED_MS);\r\n        \r\n    }\r\n\r\n\r\n}\r\n\r\nexport default insertionSortAnimated;","import React, {Component} from 'react';\r\nimport \"./SortVisualizer.css\"\r\nimport mergeSortAnimated from \"../Algorithms/MergeSort/mergeAnimation\";\r\nimport getBubbleSortAnimations from \"../Algorithms/BubbleSort\";\r\nimport quickSortAnimated from \"../Algorithms/QuickSort/QuickSortAnimation\";\r\nimport insertionSort from \"../Algorithms/InsertionSort/InsertionSort\";\r\nimport insertionSortAnimated from \"../Algorithms/InsertionSort/InsertionSortAnimation\";\r\n\r\nclass SortVisualizer extends Component {\r\n    \r\n    state = {\r\n        randomArray: []\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.resetArray(300);\r\n    }\r\n\r\n    resetArray(size) {\r\n        const randomArray = [];\r\n        for (let i = 0; i < size; i++) {\r\n            randomArray.push(this.randomInteger(10,500)) \r\n        }\r\n        this.setState({randomArray});\r\n    }\r\n\r\n    randomInteger(min, max) {\r\n        return Math.floor(Math.random() * (max - min)) + min;\r\n    }\r\n\r\n    \r\n    render() {\r\n      console.log(this.state.randomArray);\r\n        return(\r\n        <div className=\"main-container\">\r\n            <header className=\"top\">\r\n                <h1 style={{position: \"center\"}}>Algorithm visualizer</h1>\r\n            \r\n\r\n                             \r\n            </header>\r\n\r\n            <div className=\"array-container\">\r\n                {this.state.randomArray.map((arrayUnit, index) => {\r\n                return(\r\n                    <div className=\"bar\" style = {{height: `${arrayUnit}px`}} key = {index}>\r\n                    </div>\r\n                    )       \r\n                })}\r\n            </div>\r\n            <div className=\"bottom\">   \r\n                <div className = \"bottom-container\">\r\n                    <button onClick={() => this.resetArray(300)}>Generate array</button>\r\n                </div>\r\n\r\n                <div className = \"bottom-container\">\r\n                    <h3>Array size</h3>\r\n                    <button ref=\"button\" onClick={() => this.resetArray(50)}>50</button>\r\n                    <button ref=\"button\" onClick={() => this.resetArray(150)}>150</button>\r\n                    <button onClick={() => this.resetArray(300)}>300</button>\r\n                </div>\r\n            \r\n                <div className = \"bottom-container\">\r\n                    <button ref=\"button\" onClick={() => mergeSortAnimated(this.state.randomArray, this.ref)}>Merge Sort</button>\r\n            <button ref=\"button\" onClick={() => getBubbleSortAnimations(this.state.randomArray)}>Bubble Sort</button>\r\n            <button ref=\"button\" onClick={() => quickSortAnimated(this.state.randomArray)}>Quick Sort</button> \r\n            <button ref=\"button\" onClick={() => insertionSortAnimated(this.state.randomArray)}>Insertion Sort</button> \r\n                </div>\r\n            \r\n            \r\n\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SortVisualizer;","import React from 'react';\nimport './App.css';\nimport SortVisualizer from './Visualizer/SortVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortVisualizer></SortVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}